// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: HibernateByteBlobType.vsl in andromda-hibernate-cartridge.
//
#set ($className = "HibernateByteBlobType")
#set ($generatedFile = "$stringUtils.replace($userTypesPackage, '.', '/')/${className}.java")
package $userTypesPackage;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.sql.Blob;

import ${hibernateUtils.hibernatePackage}.HibernateException;
import ${hibernateUtils.hibernateUserTypePackage}.UserType;

/**
 * <p>
 * A hibernate user type which converts a Blob into a byte[] and back again.
 * </p>
 */
public class $className
    implements UserType
{
    /**
     * @see ${hibernateUtils.hibernateUserTypePackage}.UserType#sqlTypes()
     */
    public int[] sqlTypes()
    {
        return new int[]
        {
            Types.BLOB
        };
    }

    /**
     * @see ${hibernateUtils.hibernateUserTypePackage}.UserType#returnedClass()
     */
    public Class#if($enableTemplating)<?>#end returnedClass()
    {
        return byte[].class;
    }

    /**
     * @see ${hibernateUtils.hibernateUserTypePackage}.UserType#equals(java.lang.Object, java.lang.Object)
     */
    public boolean equals(Object x, Object y)
    {
        return (x == y)
            || (x != null && y != null && java.util.Arrays.equals(
                (byte[])x,
                (byte[])y));
    }

    /**
     * @see ${hibernateUtils.hibernateUserTypePackage}.UserType#nullSafeGet(java.sql.ResultSet, java.lang.String[], java.lang.Object)
     */
    public Object nullSafeGet(ResultSet resultSet, String[] names, Object owner) throws HibernateException, SQLException
    {
        final Object object;

        final InputStream inputStream = resultSet.getBinaryStream(names[0]);
        if (inputStream == null)
        {
            object = null;
        }
        else
        {
            final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();

			try
            {
			    final byte[] buffer = new byte[65536];
                int read = -1;
				
                while ((read = inputStream.read(buffer)) > -1)
                {
                    outputStream.write(buffer, 0, read);
                }
                outputStream.close();
            }
            catch (IOException exception)
            {
                throw new HibernateException("Unable to read blob " + names[0], exception);
            }
            object = outputStream.toByteArray();
        }

        return object;
    }

    /**
     * @see ${hibernateUtils.hibernateUserTypePackage}.UserType#nullSafeSet(java.sql.PreparedStatement, java.lang.Object, int)
     */
    public void nullSafeSet(PreparedStatement statement, Object value, int index) throws SQLException
    {
        final byte[] bytes = (byte[])value;
        if (bytes == null)
        {
            try
            {
                statement.setBinaryStream(index, null, 0);
            }
            catch (SQLException exception)
            {
                Blob nullBlob = null;
                statement.setBlob(index, nullBlob);
            }
        }
        else
        {
            statement.setBinaryStream(index, new ByteArrayInputStream(bytes), bytes.length);
        }
    }

    /**
     * @see ${hibernateUtils.hibernateUserTypePackage}.UserType#deepCopy(java.lang.Object)
     */
    public Object deepCopy(Object value)
    {
        if (value == null)
            return null;

        byte[] bytes = (byte[])value;
        byte[] result = new byte[bytes.length];
        System.arraycopy(bytes, 0, result, 0, bytes.length);

        return result;
    }

    /**
     * @see ${hibernateUtils.hibernateUserTypePackage}.UserType#isMutable()
     */
    public boolean isMutable()
    {
        return true;
    }
#if ($hibernateUtils.version3)

    /**
     * @see ${hibernateUtils.hibernateUserTypePackage}.UserType#replace(Object, Object, Object)
     */
    public Object replace(Object original, Object target, Object owner)
    {
        return original;
    }

    /**
     * @see ${hibernateUtils.hibernateUserTypePackage}.UserType#assemble(java.io.Serializable, Object)
     */
    public Object assemble(java.io.Serializable cached, Object owner)
    {
        return cached;
    }

    /**
     * @see ${hibernateUtils.hibernateUserTypePackage}.UserType#disassemble(Object)
     */
     public java.io.Serializable disassemble(Object value)
     {
        return (java.io.Serializable)value;
     }

     /**
     * @see ${hibernateUtils.hibernateUserTypePackage}.UserType#hashCode(Object)
     */
     public int hashCode(Object x)
     {
        return x.hashCode();
     }
#end
}