// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: HibernateEnumType.vsl in andromda-hibernate-cartridge.
//
#set ($className = "HibernateEnumType")
#set ($generatedFile = "$stringUtils.replace($userTypesPackage, '.', '/')/${className}.java")
package $userTypesPackage;

import org.hibernate.HibernateException;
import org.hibernate.usertype.EnhancedUserType;
import org.hibernate.usertype.ParameterizedType;

import java.io.Serializable;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.Properties;

/**
 * A Hibernate UserType for Java5 enumerations. Taken from
 * <a href="http://www.hibernate.org/272.html">Java 5 EnumUserType</a>.
 */
public class $className implements EnhancedUserType, ParameterizedType
{
    private Class<Enum> enumClass;

    public void setParameterValues(Properties parameters)
    {
        final String enumClassName = parameters.getProperty("enumClassName");
        try
        {
            //noinspection unchecked
            enumClass = (Class<Enum>)Class.forName(enumClassName);
        }
        catch (ClassNotFoundException cnfe)
        {
            throw new HibernateException("Enum class not found", cnfe);
        }
    }

    public Object assemble(Serializable cached, Object owner) throws HibernateException
    {
        return cached;
    }

    public Object deepCopy(Object value) throws HibernateException
    {
        return value;
    }

    public Serializable disassemble(Object value) throws HibernateException
    {
        return (Enum)value;
    }

    public boolean equals(Object x, Object y) throws HibernateException
    {
        return x == y;
    }

    public int hashCode(Object x) throws HibernateException
    {
        return x.hashCode();
    }

    public boolean isMutable()
    {
        return false;
    }

    public Object nullSafeGet(ResultSet resultSet, String[] names, Object owner) throws HibernateException, SQLException
    {
        final String name = resultSet.getString(names[0]);
        return resultSet.wasNull() ? null : Enum.valueOf(enumClass, name);
    }

    public void nullSafeSet(PreparedStatement statement, Object value, int index) throws HibernateException, SQLException
    {
        if (value == null)
        {
            statement.setNull(index, Types.VARCHAR);
        }
        else
        {
        	if(value instanceof Enum)
        	{
            	statement.setString(index, ((Enum)value).name());
            }
            else
            {
            	statement.setString(index, (String)value);
            }
        }
    }

    public Object replace(Object original, Object target, Object owner) throws HibernateException
    {
        return original;
    }

    public Class returnedClass()
    {
        return enumClass;
    }

    public int[] sqlTypes()
    {
        return new int[]{Types.VARCHAR};
    }

    public Object fromXMLString(String xmlValue)
    {
        return Enum.valueOf(enumClass, xmlValue);
    }

    public String objectToSQLString(Object value)
    {
        return '\'' + ((Enum)value).name() + '\'';
    }

    public String toXMLString(Object value)
    {
        return ((Enum)value).name();
    }

}
