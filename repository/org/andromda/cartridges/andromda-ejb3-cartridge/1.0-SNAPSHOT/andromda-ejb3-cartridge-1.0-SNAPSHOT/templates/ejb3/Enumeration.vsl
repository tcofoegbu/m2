// license-header java merge-point
/* Autogenerated by AndroMDA (Enumeration.vsl) - do not edit */
#if ($stringUtils.isNotBlank($enum.packageName))
package $enum.packageName;
#end
#set ($generatedFile = "${stringUtils.replace($enum.fullyQualifiedName,'.','/')}.java")

/**
 * Autogenerated enumeration ${enum.name}.
 *
$enum.getDocumentation(" * ")
 */
public enum ${enum.name} implements java.io.Serializable
{
#foreach ($literal in $enum.literals)
    /**
$literal.getDocumentation("     * ") 
     */
    ${literal.name}#if ($literal.enumerationLiteralParametersExist)(${literal.enumerationLiteralParameters})#end#if ($velocityCount != $enum.literals.size()),#else#**#;#end


#end
#foreach ($memberVariable in $enum.memberVariables)
    /**
$memberVariable.getDocumentation("     * ") 
     */
    $memberVariable.visibility $memberVariable.type.fullyQualifiedName ${memberVariable.name};

#end
    /**
     * $enum.name constructor
     */
    private ${enum.name}($enum.getMemberVariablesAsList($enum.memberVariables, true, true))
    {
#foreach ($memberVariable in $enum.memberVariables)
        ${memberVariable.setterName}(${memberVariable.name});
#end
    }

#foreach ($memberVariable in $enum.memberVariables)
    /**
     * Get the $memberVariable.name property
     * @return ${memberVariable.type.fullyQualifiedName}
     */
    public ${memberVariable.type.fullyQualifiedName} ${memberVariable.getterName}()
    {
        return $memberVariable.name;
    }

    /**
     * Set the $memberVariable.name property.
     * @param value the new value
     */
    public void ${memberVariable.setterName}(${memberVariable.type.fullyQualifiedName} value)
    {
        this.${memberVariable.name} = value;
    }
#end
    /**
     * Return the ${enum.name} from a string value
     * @return ${enum.name} enum object
     */
    public static ${enum.name} ${enum.fromOperationSignature}
    {
#if ($enum.literalType.stringType)
        return valueOf(value);
#else
        return values()[value];
#end
    }
    
    /**
     * Return a Collection of all literal values for this enumeration
     * @return java.util.Collection literal values
     */
    public static java.util.Collection literals()
    {
        final java.util.Collection<String> literals = new java.util.ArrayList<String>(values().length);
        for (int i = 0; i < values().length; i++)
        {
            literals.add(values()[i].name());
        }
        return literals;
    }
}